<?xml version="1.0" encoding="UTF-8"?>
<includes>
<!--Expression for Video Window-->
	<expression name="VideoYoutubeFileList">container.content(files) + String.Contains(container.folderpath,plugin://plugin.video.youtube)</expression>
	<expression name="VideoYoutubeVideoList">container.content(videos) + String.Contains(container.folderpath,plugin://plugin.video.youtube)</expression>

	<expression name="VideoGenre">container.content(genres) + String.Contains(container.folderpath,videodb://)</expression>
	<expression name="VideoYear">container.content(years) + String.Contains(container.folderpath,videodb://)</expression>
	<expression name="VideoActor">container.content(actors) + String.Contains(container.folderpath,videodb://)</expression>
	<expression name="VideoDirector">container.content(directors) + String.Contains(container.folderpath,videodb://)</expression>
	<expression name="VideoTag">container.content(tags) + String.Contains(container.folderpath,videodb://)</expression>
	<expression name="VideoCountry">container.content(countries) + String.Contains(container.folderpath,videodb://)</expression>
	<expression name="VideoSet">container.content(sets) + String.Contains(container.folderpath,videodb://)</expression>
	<expression name="VideoVersion">container.content(videoversions) + String.Contains(container.folderpath,videodb://)</expression>
	<expression name="VideoStudio">container.content(studios) + String.Contains(container.folderpath,videodb://)</expression>
	<expression name="VideoPosterList">[container.content(tvshows) | container.content(movies)] + ![String.Contains(container.folderpath,videodb://tvshows/titles) | String.Contains(container.folderpath,videodb://movies/titles/)]</expression>
	<expression name="VideoMovieList">container.content(movies) + !String.Contains(container.folderpath,videodb://movies/titles)</expression>
	<expression name="VideoLandscapeList">container.content(musicvideos) + !String.Contains(container.folderpath,videodb://musicvideos/titles)</expression>
	<expression name="VideoActorList">[container.content(artists) | container.content(actors) | container.content(directors)]</expression>
	<expression name="VideoAlbumList">container.content(albums)</expression>
	<expression name="VideoEpisodeList">container.content(episodes) + !String.Contains(container.folderpath,videodb://tvshows/titles)</expression>
	<expression name="VideoSeasonList">container.content(seasons) + !String.Contains(container.folderpath,videodb://tvshows/titles)</expression>
		
	<expression name="VideoMenu">String.isEqual(container.folderpath,library://video/) | String.isEqual(container.folderpath,videodb://)</expression>
	<expression name="VideoMenuList">!String.isEqual(container.folderpath,library://video/) + String.Contains(container.folderpath,library://video/)</expression>
	<expression name="VideoMenuList2">String.isEqual(container.folderpath,videodb://tvshows/) | String.isEqual(container.folderpath,videodb://movies/) | String.isEqual(container.folderpath,videodb://musicvideos/)</expression>
	<expression name="VideoMusic">container.content(musicvideos) + [String.Contains(container.folderpath,videodb://musicvideos/titles)]</expression>
	<expression name="VideoTVShows">container.content(tvshows) + String.Contains(container.folderpath,videodb://tvshows/titles)</expression>
	<expression name="VideoTVShowSeason">container.content(seasons) + String.Contains(container.folderpath,videodb://tvshows/titles/)</expression>
	<expression name="VideoTVShowEpisode">container.content(episodes) + String.Contains(container.folderpath,videodb://tvshows/titles/)</expression>
	<expression name="VideoMovie">container.content(movies) + String.Contains(container.folderpath,videodb://movies/titles/)</expression>
	<expression name="VideoFileList">[container.content(files) + !String.Contains(container.folderpath,plugin://plugin.video.youtube)] | String.Contains(Container.folderpath,sources://video/)</expression>
	<expression name="VideoFileSource">container.content(sources) | String.Contains(Container.folderpath,videodb://sources/)  | String.Contains(Container.folderpath,sources://video/)</expression>
	<expression name="VideoSmartPlaylist">container.content(playlists) + String.Contains(container.folderpath,special://videoplaylists/)</expression>
	<expression name="VideoAddon">[container.content(addons) + String.Contains(container.folderpath,addons://sources/video)] | [String.Contains(container.folderpath,plugin://)]</expression>
	<expression name="VideoListforYoutube">String.Contains(container.folderpath,plugin://plugin.video.youtube)</expression>
	
	<!--expression for featured playlist-->
	<expression name="VideoPosterListXSP">[container.content(tvshows)|container.content(movies)]+String.Contains(container.folderpath,.xsp)</expression>
	<expression name="VideoEpisodeListXSP">container.content(episodes)+String.Contains(container.folderpath,.xsp)</expression>
	<expression name="VideoMusicVideoListXSP">container.content(musicvideos)+String.Contains(container.folderpath,?xsp=)</expression>
	<expression name="VideoSeasonINListXSP">container.content(seasons)+String.Contains(container.folderpath,?xsp)</expression>
	<expression name="VideoEpisodeINListXSP">container.content(episodes)+String.Contains(container.folderpath,xsp=)</expression>

<!--Expression for Music Window-->
	<expression name="MusicMenu">String.isEqual(container.folderpath,library://music/) | String.isEqual(container.folderpath,musicdb://)</expression>
	<expression name="MusicVideoMenu">String.isEqual(container.folderpath,library://music/musicvideos/)</expression>
	<expression name="VideoinMusicMenu">String.Contains(container.folderpath,videodb://)</expression>
	<expression name="MusicGenre">container.content(genres) + String.Contains(container.folderpath,musicdb://)</expression>
	<expression name="MusicGenreArtist">container.content(artists) + String.Contains(container.folderpath,musicdb://genres/)</expression>
	<expression name="MusicGenreAlbum">container.content(albums) + String.Contains(container.folderpath,musicdb://genres/)</expression>
	<expression name="MusicGenreSong">container.content(songs) + String.Contains(container.folderpath,musicdb://genres/)</expression>
	<expression name="MusicYear">container.content(years) + String.Contains(container.folderpath,musicdb://)</expression>
	<expression name="MusicYearAlbum">container.content(albums) + String.Contains(container.folderpath,musicdb://years/)</expression>
	<expression name="MusicYearSong">container.content(songs) + String.Contains(container.folderpath,musicdb://years/)</expression>
	<expression name="MusicArtist">[container.content(artists) + [String.Contains(container.folderpath,musicdb://) | String.Contains(Container.folderpath,special://profile/playlists)]] + ![$EXP[MusicGenreArtist]]</expression>
	<expression name="MusicArtistCatalogue">container.content(albums) + String.Contains(container.folderpath,albumartistsonly)</expression>
	<expression name="MusicAlbum">[container.content(albums) + [String.Contains(container.folderpath,musicdb://) | String.Contains(Container.folderpath,special://profile/playlists)]] + ![$EXP[MusicGenreAlbum] | $EXP[MusicYearAlbum] | $EXP[MusicTop100Album] | $EXP[MusicPlaylistGenAlbum]]</expression>
	<expression name="MusicSongAlbum">container.content(songs) + String.Contains(Container.folderpath,albumid) + !String.Contains(Container.folderpath,xsp)</expression>
	<expression name="MusicDiskAlbum">container.content(albums) + !String.IsEqual(container.folderpath,musicdb://albums/) + [String.Contains(container.folderpath,musicdb://albums/) | String.Contains(Container.folderpath,albumid)] + ![String.Contains(Container.folderpath,xsp)]</expression>
	<expression name="MusicSong">container.content(songs) + [String.Contains(Container.folderpath,musicdb://) | String.Contains(Container.folderpath,spotify)] + !String.Contains(Container.folderpath,albumid)</expression>
	<expression name="MusicSongTrack">container.content(songs) + String.isEqual(Container.folderpath,musicdb://songs/) + !String.Contains(Container.folderpath,albumid)</expression>
	<expression name="MusicSongSingle">container.content(songs) + String.isEqual(Container.folderpath,musicdb://singles/) + !String.Contains(Container.folderpath,albumid)</expression>
	<expression name="MusicFile">[container.content(files) | String.Contains(Container.folderpath,sources://music/)] + !Window.IsActive(musicplaylisteditor)</expression>
	<expression name="MusicFileSource">container.content(sources) | String.Contains(Container.folderpath,musicdb://sources/)</expression>
	<expression name="MusicTop100">String.Contains(Container.folderpath,library://music/top100)</expression>
	<expression name="MusicTop100Album">container.content(albums) + String.Contains(container.folderpath,musicdb://albums/?xsp)</expression>
	<expression name="MusicTop100Song">container.content(songs) + String.Contains(container.folderpath,musicdb://songs/?xsp)</expression>
	<expression name="MusicPlaylistGenAlbum">container.content(albums) + [String.Contains(container.folderpath,musicdb://recentlyaddedalbums) | String.Contains(container.folderpath,musicdb://recentlyplayedalbums)]</expression>
	<expression name="MusicPlaylistGenSong">container.content(songs) + [String.Contains(container.folderpath,musicdb://recentlyaddedalbums) | String.Contains(container.folderpath,musicdb://recentlyplayedalbums)]</expression>
	<expression name="MusicCompilationAlbum">container.content(albums) + String.Contains(container.folderpath,compilation=true)</expression>
	<expression name="MusicCompilationSong">container.content(songs) + String.Contains(container.folderpath,compilation=true)</expression>
	<expression name="MusicPlaylist">Window.IsActive(musicplaylist)</expression>
	<expression name="MusicSmartPlaylist">container.content(playlists) + String.Contains(container.folderpath,special://musicplaylists/)</expression>
	<expression name="MusicSmartPlaylistM3U">container.content(songs) + String.Contains(container.folderpath,special://profile/playlists/music/) + String.Contains(container.folderpath,m3u)</expression>
	<expression name="MusicPlaylistEditor">Window.IsActive(musicplaylisteditor)</expression>
	<expression name="MusicRole">String.isEqual(container.folderpath,library://music/musicroles/)</expression>
	<expression name="MusicAddon">[container.content(addons) + String.Contains(container.folderpath,addons://sources/audio)] | String.Contains(container.folderpath,plugin://)</expression>
	<!--expression for featured playlist-->
	<expression name="MusicSongAlbumFP">container.content(songs) + String.Contains(Container.folderpath,albumid) + String.Contains(Container.folderpath,xsp)</expression>
	<expression name="MusicDiskAlbumFP">container.content(albums) + !String.IsEqual(container.folderpath,musicdb://albums/) + [String.Contains(container.folderpath,musicdb://albums/) | String.Contains(Container.folderpath,albumid)] + String.Contains(Container.folderpath,xsp)</expression>
	<expression name="MusicLastPlayed">String.Contains(container.folderpath,special://skin/extras/playlists/App/Music_lastplayedAlbums.xsp)</expression>
	<expression name="MusicMostPlayed">String.Contains(container.folderpath,special://skin/extras/playlists/App/Music_mostplayedAlbums.xsp)</expression>
	<expression name="MusicLastAdded">String.Contains(container.folderpath,special://skin/extras/playlists/App/Music_addedAlbums.xsp)</expression>
	<expression name="MusicMostLiked">String.Contains(container.folderpath,special://skin/extras/playlists/App/Music_userratedAlbums.xsp)</expression>
	<expression name="MusicTopRecommendation">String.Contains(container.folderpath,special://skin/extras/playlists/App/Music_recommendedAlbums.xsp)</expression>
	
	<expression name="MusicSongLastPlayed">container.content(songs) + String.Contains(container.folderpath,special://skin/extras/playlists/App/Music_lastplayedSongs.xsp)</expression>
	<expression name="MusicSongMostPlayed">container.content(songs) + String.Contains(container.folderpath,special://skin/extras/playlists/App/Music_mostplayedSongs.xsp)</expression>
	<expression name="MusicSongLastAdded">container.content(songs) + String.Contains(container.folderpath,special://skin/extras/playlists/App/Music_addedSongs.xsp)</expression>
	<expression name="MusicSongMostLiked">container.content(songs) + String.Contains(container.folderpath,special://skin/extras/playlists/App/Music_userratedSongs.xsp)</expression>
	<expression name="MusicTopRecommendationForSong">container.content(songs) + String.Contains(container.folderpath,special://skin/extras/playlists/App/Music_recommendedSongs.xsp)</expression>



	<expression name="listitem_has_episode_info">!String.IsEmpty(ListItem.Episode) | !String.IsEmpty(ListItem.EpisodeName) | !String.IsEmpty(ListItem.Season)</expression>
	<expression name="listitem_has_epg_event_info">!String.IsEmpty(ListItem.EpgEventTitle) | !String.IsEmpty(ListItem.TitleExtraInfo) | $EXP[listitem_has_episode_info]</expression>
</includes>


 
